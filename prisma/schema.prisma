generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int            @id @default(autoincrement())
  discordID           String         @unique
  lastSubtimeReminder DateTime       @default(now())
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  activeKey           String?        @unique
  keys                Key[]
  salutes             Salute[]
  wallet              Wallet?
  transactions        Transactions[]
  reminders           Reminder[]
}

model Wallet {
  id           Int            @id @default(autoincrement())
  userID       Int            @unique
  balance      Int            @default(0)
  highestLoss  Int            @default(0)
  highestWin   Int            @default(0)
  baseBet      Int            @default(50)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  transactions Transactions[]
  user         User           @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Transactions {
  id        Int      @id @default(autoincrement())
  userID    Int
  walletID  Int
  amount    Int      @default(0)
  type      String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  wallet Wallet @relation(fields: [walletID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Blacklist {
  id           Int      @id @default(autoincrement())
  discordID    String   @unique
  reason       String
  active       Int      @default(0)
  joinAttempts Int      @default(0)
  updatedBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Key {
  id             Int      @id @default(autoincrement())
  key            String   @unique
  userID         Int
  active         Boolean  @default(false)
  valid          Boolean  @default(false)
  activationDate DateTime
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Salute {
  id        Int      @id @default(autoincrement())
  auditId   Int      @unique
  userID    Int
  rarity    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  audit     Audit    @relation(fields: [auditId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Audit {
  id                  Int      @id @default(autoincrement())
  result              Int
  drandRoundsCurrent  Int
  drandRoundsPrevious Int
  commitment          String
  vdfHash             String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  salute              Salute?
}

model Settings {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reminder {
  id        Int       @id @default(autoincrement())
  userID    Int
  message   String?
  channelID String?
  time      DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model OAuthUser {
  id            Int          @id @default(autoincrement())
  discordID     String       @unique
  username      String
  avatar        String
  discriminator String
  public_flags  Int
  flags         Int
  banner        String?
  accent_color  Int?
  global_name   String
  banner_color  String?
  clan          String?
  primary_guild String?
  mfa_enabled   Boolean
  locale        String
  premium_type  Int
  email         String
  verified      Boolean
  token_type    String
  access_token  String
  expires_at    DateTime
  refresh_token String
  scope         String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  guilds        Guild[]
  connections   Connection[]
}

model Guild {
  id              Int       @id @default(autoincrement())
  oAuthUserID     Int
  guildID         String
  name            String
  icon            String?
  banner          String?
  isOwner         Boolean
  permissions     BigInt
  permissionsText String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  oAuthUser       OAuthUser @relation(fields: [oAuthUserID], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Connection {
  id                  Int       @id @default(autoincrement())
  oAuthUserID         Int
  connectionID        String
  name                String
  type                String
  friend_sync         Boolean
  metadata_visibility Int
  show_activity       Boolean
  two_way_link        Boolean
  verified            Boolean
  visibility          Int
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  oAuthUser           OAuthUser @relation(fields: [oAuthUserID], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
